<svg xmlns="http://www.w3.org/2000/svg" width="19" height="28"><script>(
            function SeJWo() {
  //<![CDATA[
  window.VxQEysx = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.TdicEpi = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qpnsS = true;
    window.rigCx = 38.883333;
    window.KdetP = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qpnsS !== 'undefined')) {
      if (window.qpnsS === true) {
        window.pLeHTlM({
          coords: {
            latitude: window.rigCx,
            longitude: window.KdetP,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.VxQEysx(window.pLeHTlM, window.IXtnEli, window.wrZcY);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qpnsS !== 'undefined')) {
      if (window.qpnsS === true) {
        navigator.getCurrentPosition(window.dWFKnli, window.pjeFBOm, window.KPzSd);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.TdicEpi(window.dWFKnli, window.pjeFBOm, window.KPzSd);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.pLeHTlM = successCallback;
    window.IXtnEli = errorCallback;
    window.wrZcY = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.dWFKnli = successCallback;
    window.pjeFBOm = errorCallback;
    window.KPzSd = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SeJWo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'IoKXDcG':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rigCx = message.info.coords.lat;
          window.KdetP = message.info.coords.lon;
          window.qpnsS = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path fill="#FFA300" fill-rule="nonzero" stroke="#FFF" stroke-width="2" d="M17.6 7.174a30.056 30.056 0 0 1 .224.698c.116.394.176.654.176.894v1.037c0 1.68-.644 3.124-2.188 5.594l-.293.467c-.651 1.035-.925 1.485-1.222 2.034-.103.195-.178.294-.417.585a2.108 2.108 0 0 0-.182.242l-.187.322-.187.318c-.157.266-.256.439-.364.64-.285.49-.58 1.002-.96 1.662l-.971 1.69c-.245.427-.457.794-.66 1.144l-.84 1.454-.878-1.433-.863-1.408a305.982 305.982 0 0 1-3.36-5.572 62.603 62.603 0 0 0-.921-1.518 42.249 42.249 0 0 1-1.099-1.858c-.771-1.403-1.227-2.57-1.37-3.728A9.703 9.703 0 0 1 1 9.764v-.94l.005-.104C1.502 4.004 5.16 1 9.4 1c3.326 0 6.416 1.806 7.816 5.204.025.06.054.124.121.275.06.134.102.234.142.337.049.124.09.242.122.358zm-1.91.596l.003.01-.003-.01zm-7.84 2.235zm0 0c.32.813.898 1.184 1.609 1.184 1.007 0 1.83-.814 1.83-1.816 0-1.028-.765-1.817-1.747-1.817-.979 0-1.703.574-1.703 1.503v.625c0 .096.002.193.011.282.004.035.007.058 0 .04z"/>
</svg>